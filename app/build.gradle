plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlinx-serialization"
    id "com.google.devtools.ksp"
}

def pro = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        pro.load(reader)
    }
}

static def releaseTime() {
    return new Date().format("yy.MMddHH", TimeZone.getTimeZone("GMT+8"))
}

android {
    namespace "com.github.jing332.alistandroid"
    compileSdkVersion 34
    ndkVersion "25.1.8937393"

    signingConfigs {
        release {
            keyAlias 'toutoumu'
            keyPassword '123456'
            storeFile file('./toutoumu.jks')
            storePassword '198868'
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.github.jing332.alistflutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 113
        versionName "1.25.130000"

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
            arg("room.incremental", "true")
            arg("room.expandProjection", "true")
        }

        buildConfigField("String", "ALIST_VERSION", "\"v3.36.0\"")
    }


    buildFeatures {
        compose true
        buildConfig true
        viewBinding true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.7"
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
        }
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.any { it.contains("Release") }
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            universalApk true
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //noinspection GrDeprecatedAPIUsage
            def abiName = output.getFilter(com.android.build.OutputFile.ABI)
            if (abiName == null)
                output.outputFileName = "AListF-v${variant.versionName}.apk"
            else
                output.outputFileName = "AListF-v${variant.versionName}_${abiName}.apk"
        }
    }

//    kotlin {
//        jvmToolchain  = 17
//    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }

        debug {
            ndk {
                //noinspection ChromeOsAbiSupport
//                abiFilters "arm64-v8a"
//                abiFilters "x86"
            }
        }
    }
}

////获取flutter的sdk路径
//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}
dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

//    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
    implementation project(":utils")
    //noinspection GradleDependency
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    implementation 'com.louiscad.splitties:splitties-systemservices:3.0.0'

    implementation 'com.github.cioccarellia:ksprefs:2.4.0'

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    implementation 'android.arch.navigation:navigation-fragment-ktx:1.0.0'
    implementation 'android.arch.navigation:navigation-ui-ktx:1.0.0'
    implementation 'com.android.support:design:28.0.0'

    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation("com.iqiyi.xcrash:xcrash-android-lib:3.0.0")

    implementation("com.mikepenz:aboutlibraries-core:${about_lib_version}")
    implementation("com.mikepenz:aboutlibraries-compose:${about_lib_version}")
    implementation("org.burnoutcrew.composereorderable:reorderable:0.9.6")

    implementation("com.github.jeziellago:compose-markdown:0.3.4")

    implementation("androidx.documentfile:documentfile:1.0.1")
    implementation("androidx.core:core-ktx:1.12.0")

    implementation("io.coil-kt:coil-compose:2.4.0")
    implementation("com.charleskorn.kaml:kaml:0.55.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")

    // Room
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    ksp("androidx.room:room-compiler:$room_version")
    androidTestImplementation("androidx.room:room-testing:$room_version")

    // IO & NET
    implementation 'com.squareup.okio:okio:3.3.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.github.liangjingkanji:Net:3.6.4'

    implementation("com.google.android.exoplayer:exoplayer-core:2.19.1")

    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("com.github.FunnySaltyFish.ComposeDataSaver:data-saver:v1.1.8")
    implementation("com.louiscad.splitties:splitties-systemservices:3.0.0")
    implementation("androidx.localbroadcastmanager:localbroadcastmanager:1.1.0")

    def accompanistVersion = "0.31.3-beta"
    implementation("com.google.accompanist:accompanist-systemuicontroller:${accompanistVersion}")
    implementation("com.google.accompanist:accompanist-navigation-animation:${accompanistVersion}")
    implementation("com.google.accompanist:accompanist-permissions:${accompanistVersion}")

    implementation("androidx.webkit:webkit:1.9.0")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")


    implementation("androidx.constraintlayout:constraintlayout-compose:1.0.1")
    implementation("androidx.navigation:navigation-compose:2.7.6")

    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2'
//    def composeBom = platform('androidx.compose:compose-bom:2023.06.01')
    def composeBom = platform("dev.chrisbanes.compose:compose-bom:2023.12.00-alpha04")
    implementation composeBom
    androidTestImplementation composeBom

    implementation("androidx.compose.material3:material3")
    implementation("androidx.compose.foundation:foundation")
    implementation("androidx.compose.ui:ui")

    implementation 'androidx.compose.material:material-icons-core'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.compose.material3:material3-window-size-class'

    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // Room
//    implementation("androidx.room:room-runtime:$room_version")
//    implementation("androidx.room:room-ktx:$room_version")
//    ksp("androidx.room:room-compiler:$room_version")
//    androidTestImplementation("androidx.room:room-testing:$room_version")


}
